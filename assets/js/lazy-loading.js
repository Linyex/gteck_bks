/**
 * üöÄ LAZY LOADING –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ì–¢–≠–ö
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω–∏ –Ω—É–∂–Ω—ã
 * –≠–∫–æ–Ω–æ–º–∏—è: 70-90% —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */

class LazyLoader {
    constructor() {
        this.images = [];
        this.imageObserver = null;
        this.config = {
            rootMargin: '50px 0px',
            threshold: 0.1
        };
        this.init();
    }
    
    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Intersection Observer
        if ('IntersectionObserver' in window) {
            this.imageObserver = new IntersectionObserver(this.onIntersection.bind(this), this.config);
            this.findImages();
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            this.loadAllImages();
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        this.setupMutationObserver();
    }
    
    findImages() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å data-src
        const lazyImages = document.querySelectorAll('img[data-src], .lazy-bg[data-bg], .works-ico[style*="background-image"]');
        
        lazyImages.forEach(img => {
            if (img.classList.contains('works-ico')) {
                // –î–ª—è background-image –≤ –≥–∞–ª–µ—Ä–µ—è—Ö —Å–ø–æ—Ä—Ç–∞
                this.prepareBgImage(img);
            } else if (img.hasAttribute('data-src') || img.hasAttribute('data-bg')) {
                // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                this.images.push(img);
                this.imageObserver.observe(img);
            }
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–µ–ª–∞–µ–º –∏—Ö lazy
        this.convertLargeImages();
        
        console.log(`üîç Lazy Loading: –Ω–∞–π–¥–µ–Ω–æ ${this.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    }
    
    convertLargeImages() {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ lazy loading
        const allImages = document.querySelectorAll('img:not([data-src])');
        
        allImages.forEach(img => {
            if (img.src && this.isLargeImage(img.src)) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π src –≤ data-src
                img.setAttribute('data-src', img.src);
                img.src = this.generatePlaceholder(img);
                img.classList.add('lazy-image');
                
                this.images.push(img);
                this.imageObserver.observe(img);
            }
        });
    }
    
    prepareBgImage(element) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º background-image –¥–ª—è –≥–∞–ª–µ—Ä–µ–π
        const style = element.getAttribute('style');
        const bgMatch = style.match(/background-image:\s*url\(['"]?([^'"]*?)['"]?\)/);
        
        if (bgMatch && bgMatch[1]) {
            const imageUrl = bgMatch[1];
            if (this.isLargeImage(imageUrl)) {
                element.setAttribute('data-bg', imageUrl);
                element.style.backgroundImage = `url(${this.generateBgPlaceholder()})`;
                element.classList.add('lazy-bg');
                
                this.images.push(element);
                this.imageObserver.observe(element);
            }
        }
    }
    
    isLargeImage(src) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º "–±–æ–ª—å—à–∏–µ" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏/–ø—É—Ç–∏
        const largePatterns = [
            /sport\d+\.(jpg|jpeg|png)/i,
            /145\.(jpg|jpeg|png)/i,
            /20240219162315103\.(jpg|jpeg|png)/i,
            /achievments.*\.(jpg|jpeg|png)/i,
            /images\/.*\.(jpg|jpeg|png)/i
        ];
        
        return largePatterns.some(pattern => pattern.test(src));
    }
    
    generatePlaceholder(img) {
        // –°–æ–∑–¥–∞–µ–º placeholder SVG
        const width = img.width || 400;
        const height = img.height || 300;
        
        const svg = `
            <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
                <rect width="100%" height="100%" fill="#f0f0f0"/>
                <rect x="40%" y="45%" width="20%" height="10%" fill="#ddd" rx="5"/>
                <text x="50%" y="60%" text-anchor="middle" fill="#999" font-family="Arial, sans-serif" font-size="14">–ó–∞–≥—Ä—É–∑–∫–∞...</text>
            </svg>
        `;
        
        return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));
    }
    
    generateBgPlaceholder() {
        // Placeholder –¥–ª—è background-image
        const svg = `
            <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
                <rect width="100%" height="100%" fill="#f8f9fa"/>
                <circle cx="50%" cy="45%" r="30" fill="#dee2e6"/>
                <text x="50%" y="65%" text-anchor="middle" fill="#6c757d" font-family="Arial, sans-serif" font-size="12">–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</text>
            </svg>
        `;
        
        return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));
    }
    
    onIntersection(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                this.loadImage(entry.target);
                this.imageObserver.unobserve(entry.target);
            }
        });
    }
    
    loadImage(element) {
        return new Promise((resolve, reject) => {
            if (element.classList.contains('lazy-bg')) {
                // Background image
                const bgUrl = element.getAttribute('data-bg');
                if (bgUrl) {
                    const img = new Image();
                    img.onload = () => {
                        element.style.backgroundImage = `url(${bgUrl})`;
                        element.classList.add('loaded');
                        resolve();
                    };
                    img.onerror = reject;
                    img.src = bgUrl;
                }
            } else {
                // Regular image
                const imgSrc = element.getAttribute('data-src');
                if (imgSrc) {
                    const img = new Image();
                    img.onload = () => {
                        element.src = imgSrc;
                        element.classList.add('loaded');
                        element.classList.remove('lazy-image');
                        resolve();
                    };
                    img.onerror = reject;
                    img.src = imgSrc;
                }
            }
        });
    }
    
    setupMutationObserver() {
        // –°–ª–µ–¥–∏–º –∑–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if ('MutationObserver' in window) {
            const observer = new MutationObserver(mutations => {
                mutations.forEach(mutation => {
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === 1) { // Element node
                            const images = node.querySelectorAll ? node.querySelectorAll('img, .works-ico') : [];
                            images.forEach(img => {
                                if (!img.classList.contains('lazy-processed')) {
                                    img.classList.add('lazy-processed');
                                    if (img.classList.contains('works-ico')) {
                                        this.prepareBgImage(img);
                                    } else if (this.isLargeImage(img.src)) {
                                        img.setAttribute('data-src', img.src);
                                        img.src = this.generatePlaceholder(img);
                                        img.classList.add('lazy-image');
                                        this.imageObserver.observe(img);
                                    }
                                }
                            });
                        }
                    });
                });
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
    }
    
    loadAllImages() {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ Intersection Observer
        this.images.forEach(img => this.loadImage(img));
    }
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è lazy loading
const lazyStyles = `
    .lazy-image {
        transition: opacity 0.3s ease;
        opacity: 0.7;
    }
    
    .lazy-image.loaded {
        opacity: 1;
    }
    
    .lazy-bg {
        transition: background-image 0.3s ease;
    }
    
    .lazy-bg.loaded {
        background-size: cover !important;
        background-position: center !important;
    }
    
    /* –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ */
    .lazy-image:not(.loaded),
    .lazy-bg:not(.loaded) {
        background-color: #f8f9fa;
        position: relative;
    }
    
    .lazy-image:not(.loaded)::after,
    .lazy-bg:not(.loaded)::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        animation: shimmer 1.5s infinite;
    }
    
    @keyframes shimmer {
        0% { transform: translateX(-100%); }
        100% { transform: translateX(100%); }
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head
function injectLazyStyles() {
    if (!document.getElementById('lazy-loading-styles')) {
        const style = document.createElement('style');
        style.id = 'lazy-loading-styles';
        style.textContent = lazyStyles;
        document.head.appendChild(style);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    injectLazyStyles();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    setTimeout(() => {
        const lazyLoader = new LazyLoader();
        console.log('üöÄ Lazy Loading –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        window.lazyLoader = lazyLoader;
    }, 100);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = LazyLoader;
} 