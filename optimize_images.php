<?php
/**
 * üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ì–¢–≠–ö
 * –£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ 70-90% –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞
 */

class ImageOptimizer {
    private $maxWidth = 1200;
    private $maxHeight = 800;
    private $quality = 85;
    private $thumbWidth = 400;
    private $thumbHeight = 300;
    
    public function __construct() {
        if (!extension_loaded('gd')) {
            die("‚ùå GD extension –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n");
        }
        echo "‚úÖ GD extension –Ω–∞–π–¥–µ–Ω\n";
    }
    
    public function optimizeDirectory($dir) {
        echo "\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: $dir\n";
        $files = glob($dir . '/*.{jpg,jpeg,png,gif,JPG,JPEG,PNG,GIF}', GLOB_BRACE);
        $totalSaved = 0;
        $count = 0;
        
        foreach ($files as $file) {
            $result = $this->optimizeImage($file);
            if ($result['success']) {
                $totalSaved += $result['saved'];
                $count++;
                echo "‚úÖ {$result['filename']}: {$result['saved_mb']}MB saved\n";
            }
        }
        
        echo "\nüìä –ò–¢–û–ì–û: $count —Ñ–∞–π–ª–æ–≤, " . round($totalSaved/1024/1024, 2) . "MB —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ\n";
        return $totalSaved;
    }
    
    public function optimizeImage($filePath) {
        if (!file_exists($filePath)) {
            return ['success' => false, 'error' => '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'];
        }
        
        $originalSize = filesize($filePath);
        if ($originalSize < 100 * 1024) { // –ú–µ–Ω—å—à–µ 100KB - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            return ['success' => false, 'error' => '–§–∞–π–ª —É–∂–µ –º–∞–ª'];
        }
        
        $info = getimagesize($filePath);
        if (!$info) {
            return ['success' => false, 'error' => '–ù–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'];
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        $backupPath = $filePath . '.backup';
        if (!file_exists($backupPath)) {
            copy($filePath, $backupPath);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        $image = $this->loadImage($filePath, $info[2]);
        if (!$image) {
            return ['success' => false, 'error' => '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'];
        }
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if ($info[0] > $this->maxWidth || $info[1] > $this->maxHeight) {
            $image = $this->resizeImage($image, $info[0], $info[1]);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        $this->saveImage($image, $filePath, $info[2]);
        imagedestroy($image);
        
        // –°–æ–∑–¥–∞–µ–º thumbnail
        $this->createThumbnail($filePath, $info[2]);
        
        $newSize = filesize($filePath);
        $saved = $originalSize - $newSize;
        
        return [
            'success' => true,
            'filename' => basename($filePath),
            'saved' => $saved,
            'saved_mb' => round($saved/1024/1024, 2),
            'compression' => round(($saved/$originalSize) * 100, 1)
        ];
    }
    
    private function loadImage($filePath, $type) {
        switch ($type) {
            case IMAGETYPE_JPEG:
                return imagecreatefromjpeg($filePath);
            case IMAGETYPE_PNG:
                return imagecreatefrompng($filePath);
            case IMAGETYPE_GIF:
                return imagecreatefromgif($filePath);
            default:
                return false;
        }
    }
    
    private function resizeImage($image, $width, $height) {
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        $ratio = min($this->maxWidth/$width, $this->maxHeight/$height);
        $newWidth = round($width * $ratio);
        $newHeight = round($height * $ratio);
        
        $resized = imagecreatetruecolor($newWidth, $newHeight);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è PNG
        imagealphablending($resized, false);
        imagesavealpha($resized, true);
        
        imagecopyresampled($resized, $image, 0, 0, 0, 0, $newWidth, $newHeight, $width, $height);
        imagedestroy($image);
        
        return $resized;
    }
    
    private function saveImage($image, $filePath, $type) {
        switch ($type) {
            case IMAGETYPE_JPEG:
                imagejpeg($image, $filePath, $this->quality);
                break;
            case IMAGETYPE_PNG:
                // PNG: —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è 6 (0-9)
                imagepng($image, $filePath, 6);
                break;
            case IMAGETYPE_GIF:
                imagegif($image, $filePath);
                break;
        }
    }
    
    private function createThumbnail($filePath, $type) {
        $image = $this->loadImage($filePath, $type);
        if (!$image) return false;
        
        $width = imagesx($image);
        $height = imagesy($image);
        
        $ratio = min($this->thumbWidth/$width, $this->thumbHeight/$height);
        $newWidth = round($width * $ratio);
        $newHeight = round($height * $ratio);
        
        $thumb = imagecreatetruecolor($newWidth, $newHeight);
        imagealphablending($thumb, false);
        imagesavealpha($thumb, true);
        
        imagecopyresampled($thumb, $image, 0, 0, 0, 0, $newWidth, $newHeight, $width, $height);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º thumbnail
        $pathInfo = pathinfo($filePath);
        $thumbPath = $pathInfo['dirname'] . '/thumb_' . $pathInfo['basename'];
        $this->saveImage($thumb, $thumbPath, $type);
        
        imagedestroy($image);
        imagedestroy($thumb);
        
        return $thumbPath;
    }
    
    public function restoreBackups($dir) {
        echo "\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –≤: $dir\n";
        $backups = glob($dir . '/*.backup');
        
        foreach ($backups as $backup) {
            $original = str_replace('.backup', '', $backup);
            if (copy($backup, $original)) {
                unlink($backup);
                echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " . basename($original) . "\n";
            }
        }
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if (php_sapi_name() === 'cli' || isset($_GET['optimize'])) {
    $optimizer = new ImageOptimizer();
    
    echo "üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ì–¢–≠–ö\n";
    echo "===========================================\n";
    
    $directories = [
        'assets/media/images',
        'assets/media',
        'assets/media/mini-slider',
        'assets/media/achievments'
    ];
    
    $totalSaved = 0;
    foreach ($directories as $dir) {
        if (is_dir($dir)) {
            $saved = $optimizer->optimizeDirectory($dir);
            $totalSaved += $saved;
        }
    }
    
    echo "\nüéâ –ó–ê–í–ï–†–®–ï–ù–û! –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: " . round($totalSaved/1024/1024, 2) . "MB\n";
    echo "üí° Backup —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .backup\n";
    echo "üîÑ –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ?restore=1\n";
    
} elseif (isset($_GET['restore'])) {
    $optimizer = new ImageOptimizer();
    $directories = [
        'assets/media/images',
        'assets/media',
        'assets/media/mini-slider',
        'assets/media/achievments'
    ];
    
    foreach ($directories as $dir) {
        if (is_dir($dir)) {
            $optimizer->restoreBackups($dir);
        }
    }
    echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n";
} else {
    echo "<h1>üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ì–¢–≠–ö</h1>";
    echo "<p><strong>–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ 500KB:</strong></p>";
    echo "<ul>";
    $files = glob('assets/media/**/*.{jpg,jpeg,png,gif}', GLOB_BRACE);
    foreach ($files as $file) {
        $size = filesize($file);
        if ($size > 500*1024) {
            echo "<li>$file - " . round($size/1024/1024, 2) . "MB</li>";
        }
    }
    echo "</ul>";
    echo "<p><a href='?optimize=1' style='background:#28a745;color:white;padding:10px;text-decoration:none;border-radius:5px;'>üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Æ</a></p>";
    echo "<p><a href='?restore=1' style='background:#dc3545;color:white;padding:10px;text-decoration:none;border-radius:5px;'>üîÑ –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ –ë–≠–ö–ê–ü–´</a></p>";
}
?> 